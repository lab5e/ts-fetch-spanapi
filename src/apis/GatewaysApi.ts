/* tslint:disable */
/* eslint-disable */
/**
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 5.0.5 contented-jamila
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateGatewayBody,
  Gateway,
  GatewayCertificateResponse,
  GatewayStats,
  ListGatewayResponse,
  RpcStatus,
  UpdateGatewayBody,
} from '../models';
import {
    CreateGatewayBodyFromJSON,
    CreateGatewayBodyToJSON,
    GatewayFromJSON,
    GatewayToJSON,
    GatewayCertificateResponseFromJSON,
    GatewayCertificateResponseToJSON,
    GatewayStatsFromJSON,
    GatewayStatsToJSON,
    ListGatewayResponseFromJSON,
    ListGatewayResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    UpdateGatewayBodyFromJSON,
    UpdateGatewayBodyToJSON,
} from '../models';

export interface CreateGatewayRequest {
    collectionId: string;
    body: CreateGatewayBody;
}

export interface DeleteGatewayRequest {
    collectionId: string;
    gatewayId: string;
}

export interface GatewayCertificatesRequest {
    collectionId: string;
    gatewayId: string;
}

export interface ListGatewaysRequest {
    collectionId: string;
}

export interface RetrieveGatewayRequest {
    collectionId: string;
    gatewayId: string;
}

export interface RetrieveGatewayStatsRequest {
    collectionId: string;
    gatewayId: string;
}

export interface UpdateGatewayRequest {
    existingCollectionId: string;
    gatewayId: string;
    body: UpdateGatewayBody;
}

/**
 * 
 */
export class GatewaysApi extends runtime.BaseAPI {

    /**
     * Create a new gateway.
     * Create gateway
     */
    async createGatewayRaw(requestParameters: CreateGatewayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gateway>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling createGateway.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createGateway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/gateways`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGatewayBodyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayFromJSON(jsonValue));
    }

    /**
     * Create a new gateway.
     * Create gateway
     */
    async createGateway(requestParameters: CreateGatewayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gateway> {
        const response = await this.createGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a gateway from Span.
     * Delete gateway
     */
    async deleteGatewayRaw(requestParameters: DeleteGatewayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gateway>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling deleteGateway.');
        }

        if (requestParameters.gatewayId === null || requestParameters.gatewayId === undefined) {
            throw new runtime.RequiredError('gatewayId','Required parameter requestParameters.gatewayId was null or undefined when calling deleteGateway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/gateways/{gatewayId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"gatewayId"}}`, encodeURIComponent(String(requestParameters.gatewayId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayFromJSON(jsonValue));
    }

    /**
     * Remove a gateway from Span.
     * Delete gateway
     */
    async deleteGateway(requestParameters: DeleteGatewayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gateway> {
        const response = await this.deleteGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get issued certificate(s) for gateway
     */
    async gatewayCertificatesRaw(requestParameters: GatewayCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GatewayCertificateResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling gatewayCertificates.');
        }

        if (requestParameters.gatewayId === null || requestParameters.gatewayId === undefined) {
            throw new runtime.RequiredError('gatewayId','Required parameter requestParameters.gatewayId was null or undefined when calling gatewayCertificates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/gateways/{gatewayId}/certs`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"gatewayId"}}`, encodeURIComponent(String(requestParameters.gatewayId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayCertificateResponseFromJSON(jsonValue));
    }

    /**
     * Get issued certificate(s) for gateway
     */
    async gatewayCertificates(requestParameters: GatewayCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GatewayCertificateResponse> {
        const response = await this.gatewayCertificatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the user\'s gatways, including built-in gateways.
     * List gateways
     */
    async listGatewaysRaw(requestParameters: ListGatewaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListGatewayResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling listGateways.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/gateways`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListGatewayResponseFromJSON(jsonValue));
    }

    /**
     * List the user\'s gatways, including built-in gateways.
     * List gateways
     */
    async listGateways(requestParameters: ListGatewaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListGatewayResponse> {
        const response = await this.listGatewaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get gateway information
     * Retrieve gateway
     */
    async retrieveGatewayRaw(requestParameters: RetrieveGatewayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gateway>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling retrieveGateway.');
        }

        if (requestParameters.gatewayId === null || requestParameters.gatewayId === undefined) {
            throw new runtime.RequiredError('gatewayId','Required parameter requestParameters.gatewayId was null or undefined when calling retrieveGateway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/gateways/{gatewayId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"gatewayId"}}`, encodeURIComponent(String(requestParameters.gatewayId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayFromJSON(jsonValue));
    }

    /**
     * Get gateway information
     * Retrieve gateway
     */
    async retrieveGateway(requestParameters: RetrieveGatewayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gateway> {
        const response = await this.retrieveGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get statistics for gateway
     * Retrieve gateway statistics
     */
    async retrieveGatewayStatsRaw(requestParameters: RetrieveGatewayStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GatewayStats>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling retrieveGatewayStats.');
        }

        if (requestParameters.gatewayId === null || requestParameters.gatewayId === undefined) {
            throw new runtime.RequiredError('gatewayId','Required parameter requestParameters.gatewayId was null or undefined when calling retrieveGatewayStats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/gateways/{gatewayId}/stats`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"gatewayId"}}`, encodeURIComponent(String(requestParameters.gatewayId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayStatsFromJSON(jsonValue));
    }

    /**
     * Get statistics for gateway
     * Retrieve gateway statistics
     */
    async retrieveGatewayStats(requestParameters: RetrieveGatewayStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GatewayStats> {
        const response = await this.retrieveGatewayStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update configuration for a gateway. If you want to remove or move a gateway from the collection the devices in the collection must not have any gateway configuration. The certificates for the gateway are unchanged when the gateway is moved.
     * Update gateway
     */
    async updateGatewayRaw(requestParameters: UpdateGatewayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gateway>> {
        if (requestParameters.existingCollectionId === null || requestParameters.existingCollectionId === undefined) {
            throw new runtime.RequiredError('existingCollectionId','Required parameter requestParameters.existingCollectionId was null or undefined when calling updateGateway.');
        }

        if (requestParameters.gatewayId === null || requestParameters.gatewayId === undefined) {
            throw new runtime.RequiredError('gatewayId','Required parameter requestParameters.gatewayId was null or undefined when calling updateGateway.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateGateway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{existingCollectionId}/gateways/{gatewayId}`.replace(`{${"existingCollectionId"}}`, encodeURIComponent(String(requestParameters.existingCollectionId))).replace(`{${"gatewayId"}}`, encodeURIComponent(String(requestParameters.gatewayId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGatewayBodyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayFromJSON(jsonValue));
    }

    /**
     * Update configuration for a gateway. If you want to remove or move a gateway from the collection the devices in the collection must not have any gateway configuration. The certificates for the gateway are unchanged when the gateway is moved.
     * Update gateway
     */
    async updateGateway(requestParameters: UpdateGatewayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gateway> {
        const response = await this.updateGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
