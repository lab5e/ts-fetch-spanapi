/* tslint:disable */
/* eslint-disable */
/**
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.3.0 grouchy-aloysius
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Gateway,
    GatewayFromJSON,
    GatewayToJSON,
    ListGatewayResponse,
    ListGatewayResponseFromJSON,
    ListGatewayResponseToJSON,
    ListNetworkResponse,
    ListNetworkResponseFromJSON,
    ListNetworkResponseToJSON,
    Status,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface ListGatewaysRequest {
    networkId: string;
}

export interface RetrieveGatewayRequest {
    networkId: string;
    gatewayId: string;
}

/**
 * 
 */
export class GatewaysApi extends runtime.BaseAPI {

    /**
     * List the gatways for the network. Some of the gatways are built into Span and can\'t be deleted.
     * List gateways
     */
    async listGatewaysRaw(requestParameters: ListGatewaysRequest): Promise<runtime.ApiResponse<ListGatewayResponse>> {
        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
            throw new runtime.RequiredError('networkId','Required parameter requestParameters.networkId was null or undefined when calling listGateways.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/networks/{networkId}/gateways`.replace(`{${"networkId"}}`, encodeURIComponent(String(requestParameters.networkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListGatewayResponseFromJSON(jsonValue));
    }

    /**
     * List the gatways for the network. Some of the gatways are built into Span and can\'t be deleted.
     * List gateways
     */
    async listGateways(requestParameters: ListGatewaysRequest): Promise<ListGatewayResponse> {
        const response = await this.listGatewaysRaw(requestParameters);
        return await response.value();
    }

    /**
     * List networks available to the collection. This will include the built-in networks in Span.
     * List networks
     */
    async listNetworksRaw(): Promise<runtime.ApiResponse<ListNetworkResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/networks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListNetworkResponseFromJSON(jsonValue));
    }

    /**
     * List networks available to the collection. This will include the built-in networks in Span.
     * List networks
     */
    async listNetworks(): Promise<ListNetworkResponse> {
        const response = await this.listNetworksRaw();
        return await response.value();
    }

    /**
     * Get gateway information
     * Retrieve gateway
     */
    async retrieveGatewayRaw(requestParameters: RetrieveGatewayRequest): Promise<runtime.ApiResponse<Gateway>> {
        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
            throw new runtime.RequiredError('networkId','Required parameter requestParameters.networkId was null or undefined when calling retrieveGateway.');
        }

        if (requestParameters.gatewayId === null || requestParameters.gatewayId === undefined) {
            throw new runtime.RequiredError('gatewayId','Required parameter requestParameters.gatewayId was null or undefined when calling retrieveGateway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/networks/{networkId}/gateways/{gatewayId}`.replace(`{${"networkId"}}`, encodeURIComponent(String(requestParameters.networkId))).replace(`{${"gatewayId"}}`, encodeURIComponent(String(requestParameters.gatewayId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayFromJSON(jsonValue));
    }

    /**
     * Get gateway information
     * Retrieve gateway
     */
    async retrieveGateway(requestParameters: RetrieveGatewayRequest): Promise<Gateway> {
        const response = await this.retrieveGatewayRaw(requestParameters);
        return await response.value();
    }

}
