/* tslint:disable */
/* eslint-disable */
/**
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.1.7 only-deshaun
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ListOutputResponse,
    ListOutputResponseFromJSON,
    ListOutputResponseToJSON,
    Output,
    OutputFromJSON,
    OutputToJSON,
    OutputLogResponse,
    OutputLogResponseFromJSON,
    OutputLogResponseToJSON,
    OutputStatusResponse,
    OutputStatusResponseFromJSON,
    OutputStatusResponseToJSON,
    RpcStatus,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface SpanCreateOutputRequest {
    collectionId: string;
    body: Output;
}

export interface SpanDeleteOutputRequest {
    collectionId: string;
    outputId: string;
}

export interface SpanListOutputsRequest {
    collectionId: string;
}

export interface SpanLogsRequest {
    collectionId: string;
    outputId: string;
}

export interface SpanRetrieveOutputRequest {
    collectionId: string;
    outputId: string;
}

export interface SpanStatusRequest {
    collectionId: string;
    outputId: string;
}

export interface SpanUpdateOutputRequest {
    collectionId: string;
    outputId: string;
    body: Output;
}

/**
 * 
 */
export class OutputsApi extends runtime.BaseAPI {

    /**
     * Create output
     */
    async spanCreateOutputRaw(requestParameters: SpanCreateOutputRequest): Promise<runtime.ApiResponse<Output>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanCreateOutput.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling spanCreateOutput.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/outputs`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OutputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OutputFromJSON(jsonValue));
    }

    /**
     * Create output
     */
    async spanCreateOutput(requestParameters: SpanCreateOutputRequest): Promise<Output> {
        const response = await this.spanCreateOutputRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete output
     */
    async spanDeleteOutputRaw(requestParameters: SpanDeleteOutputRequest): Promise<runtime.ApiResponse<Output>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanDeleteOutput.');
        }

        if (requestParameters.outputId === null || requestParameters.outputId === undefined) {
            throw new runtime.RequiredError('outputId','Required parameter requestParameters.outputId was null or undefined when calling spanDeleteOutput.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/outputs/{outputId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"outputId"}}`, encodeURIComponent(String(requestParameters.outputId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OutputFromJSON(jsonValue));
    }

    /**
     * Delete output
     */
    async spanDeleteOutput(requestParameters: SpanDeleteOutputRequest): Promise<Output> {
        const response = await this.spanDeleteOutputRaw(requestParameters);
        return await response.value();
    }

    /**
     * List outputs
     */
    async spanListOutputsRaw(requestParameters: SpanListOutputsRequest): Promise<runtime.ApiResponse<ListOutputResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanListOutputs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/outputs`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOutputResponseFromJSON(jsonValue));
    }

    /**
     * List outputs
     */
    async spanListOutputs(requestParameters: SpanListOutputsRequest): Promise<ListOutputResponse> {
        const response = await this.spanListOutputsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Output logs
     */
    async spanLogsRaw(requestParameters: SpanLogsRequest): Promise<runtime.ApiResponse<OutputLogResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanLogs.');
        }

        if (requestParameters.outputId === null || requestParameters.outputId === undefined) {
            throw new runtime.RequiredError('outputId','Required parameter requestParameters.outputId was null or undefined when calling spanLogs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/outputs/{outputId}/logs`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"outputId"}}`, encodeURIComponent(String(requestParameters.outputId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OutputLogResponseFromJSON(jsonValue));
    }

    /**
     * Output logs
     */
    async spanLogs(requestParameters: SpanLogsRequest): Promise<OutputLogResponse> {
        const response = await this.spanLogsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve output
     */
    async spanRetrieveOutputRaw(requestParameters: SpanRetrieveOutputRequest): Promise<runtime.ApiResponse<Output>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanRetrieveOutput.');
        }

        if (requestParameters.outputId === null || requestParameters.outputId === undefined) {
            throw new runtime.RequiredError('outputId','Required parameter requestParameters.outputId was null or undefined when calling spanRetrieveOutput.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/outputs/{outputId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"outputId"}}`, encodeURIComponent(String(requestParameters.outputId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OutputFromJSON(jsonValue));
    }

    /**
     * Retrieve output
     */
    async spanRetrieveOutput(requestParameters: SpanRetrieveOutputRequest): Promise<Output> {
        const response = await this.spanRetrieveOutputRaw(requestParameters);
        return await response.value();
    }

    /**
     * Output status
     */
    async spanStatusRaw(requestParameters: SpanStatusRequest): Promise<runtime.ApiResponse<OutputStatusResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanStatus.');
        }

        if (requestParameters.outputId === null || requestParameters.outputId === undefined) {
            throw new runtime.RequiredError('outputId','Required parameter requestParameters.outputId was null or undefined when calling spanStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/outputs/{outputId}/status`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"outputId"}}`, encodeURIComponent(String(requestParameters.outputId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OutputStatusResponseFromJSON(jsonValue));
    }

    /**
     * Output status
     */
    async spanStatus(requestParameters: SpanStatusRequest): Promise<OutputStatusResponse> {
        const response = await this.spanStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Running outputs will be restarted if required. Note that the collection ID can\'t be changed on an existing output.
     * Update output
     */
    async spanUpdateOutputRaw(requestParameters: SpanUpdateOutputRequest): Promise<runtime.ApiResponse<Output>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanUpdateOutput.');
        }

        if (requestParameters.outputId === null || requestParameters.outputId === undefined) {
            throw new runtime.RequiredError('outputId','Required parameter requestParameters.outputId was null or undefined when calling spanUpdateOutput.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling spanUpdateOutput.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/outputs/{outputId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"outputId"}}`, encodeURIComponent(String(requestParameters.outputId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OutputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OutputFromJSON(jsonValue));
    }

    /**
     * Running outputs will be restarted if required. Note that the collection ID can\'t be changed on an existing output.
     * Update output
     */
    async spanUpdateOutput(requestParameters: SpanUpdateOutputRequest): Promise<Output> {
        const response = await this.spanUpdateOutputRaw(requestParameters);
        return await response.value();
    }

}
