/* tslint:disable */
/* eslint-disable */
/**
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 5.0.5 contented-jamila
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignTargetImageResponse,
  ClearFirmwareErrorResponse,
  CreateFirmwareBody,
  CreateLabeledFirmwareResponse,
  Firmware,
  FirmwareStats,
  FirmwareUsageResponse,
  GetImageStateResponse,
  ListFirmwareResponse,
  ListImageStatesResponse,
  ListImageVersionHistoryResponse,
  ListLabeledFirmwareResponse,
  RpcStatus,
  UpdateFirmwareBody,
} from '../models';
import {
    AssignTargetImageResponseFromJSON,
    AssignTargetImageResponseToJSON,
    ClearFirmwareErrorResponseFromJSON,
    ClearFirmwareErrorResponseToJSON,
    CreateFirmwareBodyFromJSON,
    CreateFirmwareBodyToJSON,
    CreateLabeledFirmwareResponseFromJSON,
    CreateLabeledFirmwareResponseToJSON,
    FirmwareFromJSON,
    FirmwareToJSON,
    FirmwareStatsFromJSON,
    FirmwareStatsToJSON,
    FirmwareUsageResponseFromJSON,
    FirmwareUsageResponseToJSON,
    GetImageStateResponseFromJSON,
    GetImageStateResponseToJSON,
    ListFirmwareResponseFromJSON,
    ListFirmwareResponseToJSON,
    ListImageStatesResponseFromJSON,
    ListImageStatesResponseToJSON,
    ListImageVersionHistoryResponseFromJSON,
    ListImageVersionHistoryResponseToJSON,
    ListLabeledFirmwareResponseFromJSON,
    ListLabeledFirmwareResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    UpdateFirmwareBodyFromJSON,
    UpdateFirmwareBodyToJSON,
} from '../models';

export interface AssignTargetImageRequest {
    collectionId: string;
    imageId: string;
    label?: string;
    deviceId?: string;
}

export interface ClearFirmwareErrorRequest {
    collectionId: string;
    deviceId: string;
}

export interface CreateFirmwareRequest {
    collectionId: string;
    body: CreateFirmwareBody;
}

export interface CreateLabeledFirmwareRequest {
    collectionId: string;
    version?: string;
    label?: string;
    imageRef?: string;
}

export interface DeleteFirmwareRequest {
    collectionId: string;
    imageId: string;
}

export interface DeleteLabeledImageRequest {
    collectionId: string;
    imageId: string;
}

export interface FirmwareUsageRequest {
    collectionId: string;
    imageId: string;
}

export interface GetImageStateRequest {
    collectionId: string;
    deviceId: string;
}

export interface ListFirmwareRequest {
    collectionId: string;
}

export interface ListImageStatesRequest {
    collectionId: string;
}

export interface ListImageVersionHistoryRequest {
    collectionId: string;
    deviceId: string;
}

export interface ListLabeledFirmwareRequest {
    collectionId: string;
}

export interface RetrieveFirmwareRequest {
    collectionId: string;
    imageId: string;
}

export interface RetrieveFirmwareStatsRequest {
    collectionId: string;
    imageId: string;
}

export interface UpdateFirmwareRequest {
    existingCollectionId: string;
    imageId: string;
    body: UpdateFirmwareBody;
}

/**
 * 
 */
export class FotaApi extends runtime.BaseAPI {

    /**
     * Assign a particular labeled image to a device or a collection
     * BETA: Assign a target image
     */
    async assignTargetImageRaw(requestParameters: AssignTargetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignTargetImageResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling assignTargetImage.');
        }

        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling assignTargetImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }

        if (requestParameters.deviceId !== undefined) {
            queryParameters['deviceId'] = requestParameters.deviceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware/labeled/{imageId}/assign`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignTargetImageResponseFromJSON(jsonValue));
    }

    /**
     * Assign a particular labeled image to a device or a collection
     * BETA: Assign a target image
     */
    async assignTargetImage(requestParameters: AssignTargetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignTargetImageResponse> {
        const response = await this.assignTargetImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clear FOTA error
     */
    async clearFirmwareErrorRaw(requestParameters: ClearFirmwareErrorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClearFirmwareErrorResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling clearFirmwareError.');
        }

        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling clearFirmwareError.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/devices/{deviceId}/fwerror`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClearFirmwareErrorResponseFromJSON(jsonValue));
    }

    /**
     * Clear FOTA error
     */
    async clearFirmwareError(requestParameters: ClearFirmwareErrorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClearFirmwareErrorResponse> {
        const response = await this.clearFirmwareErrorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
     * Create firmware
     */
    async createFirmwareRaw(requestParameters: CreateFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Firmware>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling createFirmware.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createFirmware.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFirmwareBodyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FirmwareFromJSON(jsonValue));
    }

    /**
     * Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
     * Create firmware
     */
    async createFirmware(requestParameters: CreateFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Firmware> {
        const response = await this.createFirmwareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
     * BETA: Create a labeled firmware image
     */
    async createLabeledFirmwareRaw(requestParameters: CreateLabeledFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLabeledFirmwareResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling createLabeledFirmware.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }

        if (requestParameters.imageRef !== undefined) {
            queryParameters['imageRef'] = requestParameters.imageRef;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware/labeled`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLabeledFirmwareResponseFromJSON(jsonValue));
    }

    /**
     * Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
     * BETA: Create a labeled firmware image
     */
    async createLabeledFirmware(requestParameters: CreateLabeledFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLabeledFirmwareResponse> {
        const response = await this.createLabeledFirmwareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete firmware
     */
    async deleteFirmwareRaw(requestParameters: DeleteFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Firmware>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling deleteFirmware.');
        }

        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling deleteFirmware.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware/{imageId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FirmwareFromJSON(jsonValue));
    }

    /**
     * Delete firmware
     */
    async deleteFirmware(requestParameters: DeleteFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Firmware> {
        const response = await this.deleteFirmwareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a tagged firmware image from the backing store and it\'s metadata
     * BETA: Remove a tagged firmware image
     */
    async deleteLabeledImageRaw(requestParameters: DeleteLabeledImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling deleteLabeledImage.');
        }

        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling deleteLabeledImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware/labeled/{imageId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove a tagged firmware image from the backing store and it\'s metadata
     * BETA: Remove a tagged firmware image
     */
    async deleteLabeledImage(requestParameters: DeleteLabeledImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteLabeledImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Firmware usage
     */
    async firmwareUsageRaw(requestParameters: FirmwareUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FirmwareUsageResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling firmwareUsage.');
        }

        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling firmwareUsage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware/{imageId}/usage`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FirmwareUsageResponseFromJSON(jsonValue));
    }

    /**
     * Firmware usage
     */
    async firmwareUsage(requestParameters: FirmwareUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FirmwareUsageResponse> {
        const response = await this.firmwareUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * BETA: Get state for a single device
     */
    async getImageStateRaw(requestParameters: GetImageStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetImageStateResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling getImageState.');
        }

        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling getImageState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/devices/{deviceId}/fotastate`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetImageStateResponseFromJSON(jsonValue));
    }

    /**
     * BETA: Get state for a single device
     */
    async getImageState(requestParameters: GetImageStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetImageStateResponse> {
        const response = await this.getImageStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List firmware
     */
    async listFirmwareRaw(requestParameters: ListFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFirmwareResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling listFirmware.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFirmwareResponseFromJSON(jsonValue));
    }

    /**
     * List firmware
     */
    async listFirmware(requestParameters: ListFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFirmwareResponse> {
        const response = await this.listFirmwareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the status for the labeled firmware images in the collection
     * BETA: List image assignments plus states
     */
    async listImageStatesRaw(requestParameters: ListImageStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListImageStatesResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling listImageStates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware/labeled/states`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListImageStatesResponseFromJSON(jsonValue));
    }

    /**
     * List the status for the labeled firmware images in the collection
     * BETA: List image assignments plus states
     */
    async listImageStates(requestParameters: ListImageStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListImageStatesResponse> {
        const response = await this.listImageStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * BETA: List version history for a single device
     */
    async listImageVersionHistoryRaw(requestParameters: ListImageVersionHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListImageVersionHistoryResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling listImageVersionHistory.');
        }

        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling listImageVersionHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/devices/{deviceId}/fotalog`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListImageVersionHistoryResponseFromJSON(jsonValue));
    }

    /**
     * BETA: List version history for a single device
     */
    async listImageVersionHistory(requestParameters: ListImageVersionHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListImageVersionHistoryResponse> {
        const response = await this.listImageVersionHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * BETA: List the labeled firmware images for a collection
     */
    async listLabeledFirmwareRaw(requestParameters: ListLabeledFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListLabeledFirmwareResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling listLabeledFirmware.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware/labeled`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListLabeledFirmwareResponseFromJSON(jsonValue));
    }

    /**
     * BETA: List the labeled firmware images for a collection
     */
    async listLabeledFirmware(requestParameters: ListLabeledFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListLabeledFirmwareResponse> {
        const response = await this.listLabeledFirmwareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve firmware
     */
    async retrieveFirmwareRaw(requestParameters: RetrieveFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Firmware>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling retrieveFirmware.');
        }

        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling retrieveFirmware.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware/{imageId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FirmwareFromJSON(jsonValue));
    }

    /**
     * Retrieve firmware
     */
    async retrieveFirmware(requestParameters: RetrieveFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Firmware> {
        const response = await this.retrieveFirmwareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve firmware statistics
     */
    async retrieveFirmwareStatsRaw(requestParameters: RetrieveFirmwareStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FirmwareStats>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling retrieveFirmwareStats.');
        }

        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling retrieveFirmwareStats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{collectionId}/firmware/{imageId}/stats`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FirmwareStatsFromJSON(jsonValue));
    }

    /**
     * Retrieve firmware statistics
     */
    async retrieveFirmwareStats(requestParameters: RetrieveFirmwareStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FirmwareStats> {
        const response = await this.retrieveFirmwareStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Only the version and tags fields can be updated. The other fields will be ignored.
     * Update firmware
     */
    async updateFirmwareRaw(requestParameters: UpdateFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Firmware>> {
        if (requestParameters.existingCollectionId === null || requestParameters.existingCollectionId === undefined) {
            throw new runtime.RequiredError('existingCollectionId','Required parameter requestParameters.existingCollectionId was null or undefined when calling updateFirmware.');
        }

        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling updateFirmware.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateFirmware.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/span/collections/{existingCollectionId}/firmware/{imageId}`.replace(`{${"existingCollectionId"}}`, encodeURIComponent(String(requestParameters.existingCollectionId))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFirmwareBodyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FirmwareFromJSON(jsonValue));
    }

    /**
     * Only the version and tags fields can be updated. The other fields will be ignored.
     * Update firmware
     */
    async updateFirmware(requestParameters: UpdateFirmwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Firmware> {
        const response = await this.updateFirmwareRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
