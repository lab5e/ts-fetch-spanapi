/* tslint:disable */
/* eslint-disable */
/**
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.1.7 only-deshaun
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Device,
    DeviceFromJSON,
    DeviceToJSON,
    ListDataResponse,
    ListDataResponseFromJSON,
    ListDataResponseToJSON,
    ListDevicesResponse,
    ListDevicesResponseFromJSON,
    ListDevicesResponseToJSON,
    RpcStatus,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    SendMessageRequest,
    SendMessageRequestFromJSON,
    SendMessageRequestToJSON,
    UpdateDeviceRequest,
    UpdateDeviceRequestFromJSON,
    UpdateDeviceRequestToJSON,
} from '../models';

export interface SpanCreateDeviceRequest {
    collectionId: string;
    body: Device;
}

export interface SpanDeleteDeviceRequest {
    collectionId: string;
    deviceId: string;
}

export interface SpanListDeviceDataRequest {
    collectionId: string;
    deviceId: string;
    limit?: number;
    start?: string;
    end?: string;
    offset?: string;
}

export interface SpanListDevicesRequest {
    collectionId: string;
}

export interface SpanRetrieveDeviceRequest {
    collectionId: string;
    deviceId: string;
}

export interface SpanSendMessageRequest {
    collectionId: string;
    deviceId: string;
    body: SendMessageRequest;
}

export interface SpanUpdateDeviceRequest {
    existingCollectionId: string;
    deviceId: string;
    body: UpdateDeviceRequest;
}

/**
 * 
 */
export class DevicesApi extends runtime.BaseAPI {

    /**
     * Create a new device. This will add a device to the collection. You must have write access to the collection.
     * Create device
     */
    async spanCreateDeviceRaw(requestParameters: SpanCreateDeviceRequest): Promise<runtime.ApiResponse<Device>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanCreateDevice.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling spanCreateDevice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/devices`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceFromJSON(jsonValue));
    }

    /**
     * Create a new device. This will add a device to the collection. You must have write access to the collection.
     * Create device
     */
    async spanCreateDevice(requestParameters: SpanCreateDeviceRequest): Promise<Device> {
        const response = await this.spanCreateDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove device
     */
    async spanDeleteDeviceRaw(requestParameters: SpanDeleteDeviceRequest): Promise<runtime.ApiResponse<Device>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanDeleteDevice.');
        }

        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling spanDeleteDevice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/devices/{deviceId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceFromJSON(jsonValue));
    }

    /**
     * Remove device
     */
    async spanDeleteDevice(requestParameters: SpanDeleteDeviceRequest): Promise<Device> {
        const response = await this.spanDeleteDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * List the data received from the device. Use the query parameters to control what data you retrieve.
     * Get payloads
     */
    async spanListDeviceDataRaw(requestParameters: SpanListDeviceDataRequest): Promise<runtime.ApiResponse<ListDataResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanListDeviceData.');
        }

        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling spanListDeviceData.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/devices/{deviceId}/data`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDataResponseFromJSON(jsonValue));
    }

    /**
     * List the data received from the device. Use the query parameters to control what data you retrieve.
     * Get payloads
     */
    async spanListDeviceData(requestParameters: SpanListDeviceDataRequest): Promise<ListDataResponse> {
        const response = await this.spanListDeviceDataRaw(requestParameters);
        return await response.value();
    }

    /**
     * List devices
     */
    async spanListDevicesRaw(requestParameters: SpanListDevicesRequest): Promise<runtime.ApiResponse<ListDevicesResponse>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanListDevices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/devices`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDevicesResponseFromJSON(jsonValue));
    }

    /**
     * List devices
     */
    async spanListDevices(requestParameters: SpanListDevicesRequest): Promise<ListDevicesResponse> {
        const response = await this.spanListDevicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a single device
     * Retrieve device
     */
    async spanRetrieveDeviceRaw(requestParameters: SpanRetrieveDeviceRequest): Promise<runtime.ApiResponse<Device>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanRetrieveDevice.');
        }

        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling spanRetrieveDevice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/devices/{deviceId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceFromJSON(jsonValue));
    }

    /**
     * Retrieve a single device
     * Retrieve device
     */
    async spanRetrieveDevice(requestParameters: SpanRetrieveDeviceRequest): Promise<Device> {
        const response = await this.spanRetrieveDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send a message to the device
     * Send message
     */
    async spanSendMessageRaw(requestParameters: SpanSendMessageRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling spanSendMessage.');
        }

        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling spanSendMessage.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling spanSendMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{collectionId}/devices/{deviceId}/to`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send a message to the device
     * Send message
     */
    async spanSendMessage(requestParameters: SpanSendMessageRequest): Promise<object> {
        const response = await this.spanSendMessageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update device
     */
    async spanUpdateDeviceRaw(requestParameters: SpanUpdateDeviceRequest): Promise<runtime.ApiResponse<Device>> {
        if (requestParameters.existingCollectionId === null || requestParameters.existingCollectionId === undefined) {
            throw new runtime.RequiredError('existingCollectionId','Required parameter requestParameters.existingCollectionId was null or undefined when calling spanUpdateDevice.');
        }

        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling spanUpdateDevice.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling spanUpdateDevice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/collections/{existingCollectionId}/devices/{deviceId}`.replace(`{${"existingCollectionId"}}`, encodeURIComponent(String(requestParameters.existingCollectionId))).replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDeviceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceFromJSON(jsonValue));
    }

    /**
     * Update device
     */
    async spanUpdateDevice(requestParameters: SpanUpdateDeviceRequest): Promise<Device> {
        const response = await this.spanUpdateDeviceRaw(requestParameters);
        return await response.value();
    }

}
