/* tslint:disable */
/* eslint-disable */
/**
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 5.0.2 subversive-jamila
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * This is the request object when updating the firmware image
 * @export
 * @interface UpdateFirmwareBody
 */
export interface UpdateFirmwareBody {
    /**
     * 
     * @type {string}
     * @memberof UpdateFirmwareBody
     */
    collectionId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFirmwareBody
     */
    version?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof UpdateFirmwareBody
     */
    tags?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof UpdateFirmwareBody
     */
    enabled?: boolean;
}

/**
 * Check if a given object implements the UpdateFirmwareBody interface.
 */
export function instanceOfUpdateFirmwareBody(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateFirmwareBodyFromJSON(json: any): UpdateFirmwareBody {
    return UpdateFirmwareBodyFromJSONTyped(json, false);
}

export function UpdateFirmwareBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateFirmwareBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'collectionId': !exists(json, 'collectionId') ? undefined : json['collectionId'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
    };
}

export function UpdateFirmwareBodyToJSON(value?: UpdateFirmwareBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'collectionId': value.collectionId,
        'version': value.version,
        'tags': value.tags,
        'enabled': value.enabled,
    };
}

