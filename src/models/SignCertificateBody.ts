/* tslint:disable */
/* eslint-disable */
/**
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 5.0.3 pitch-dark-elza
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request certificate signing
 * @export
 * @interface SignCertificateBody
 */
export interface SignCertificateBody {
    /**
     * 
     * @type {string}
     * @memberof SignCertificateBody
     */
    gatewayId?: string;
    /**
     * 
     * @type {string}
     * @memberof SignCertificateBody
     */
    deviceId?: string;
    /**
     * 
     * @type {string}
     * @memberof SignCertificateBody
     */
    csr?: string;
}

/**
 * Check if a given object implements the SignCertificateBody interface.
 */
export function instanceOfSignCertificateBody(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SignCertificateBodyFromJSON(json: any): SignCertificateBody {
    return SignCertificateBodyFromJSONTyped(json, false);
}

export function SignCertificateBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignCertificateBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'gatewayId': !exists(json, 'gatewayId') ? undefined : json['gatewayId'],
        'deviceId': !exists(json, 'deviceId') ? undefined : json['deviceId'],
        'csr': !exists(json, 'csr') ? undefined : json['csr'],
    };
}

export function SignCertificateBodyToJSON(value?: SignCertificateBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'gatewayId': value.gatewayId,
        'deviceId': value.deviceId,
        'csr': value.csr,
    };
}

