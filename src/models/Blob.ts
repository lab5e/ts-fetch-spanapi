/* tslint:disable */
/* eslint-disable */
/**
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 5.0.4 pettish-alleen
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * This is a blob (binary large object) that the devices might upload to the
 * service. This is messages that are typically too large to handle like regular
 * status and sensor values, typically media files. The content type might be
 * derived from the first few bytes of the blob and could possibly be incorrect.
 * 
 * Download the blob by accessing the blob URL field. This will work like a
 * regular HTTP request for your client. Authentication is required as always.
 * @export
 * @interface Blob
 */
export interface Blob {
    /**
     * 
     * @type {string}
     * @memberof Blob
     */
    blobId?: string;
    /**
     * 
     * @type {string}
     * @memberof Blob
     */
    blobPath?: string;
    /**
     * 
     * @type {string}
     * @memberof Blob
     */
    contentType?: string;
    /**
     * 
     * @type {string}
     * @memberof Blob
     */
    size?: string;
    /**
     * 
     * @type {string}
     * @memberof Blob
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof Blob
     */
    collectionId?: string;
    /**
     * 
     * @type {string}
     * @memberof Blob
     */
    deviceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Blob
     */
    gatewayId?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Blob
     */
    properties?: { [key: string]: string; };
}

/**
 * Check if a given object implements the Blob interface.
 */
export function instanceOfBlob(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlobFromJSON(json: any): Blob {
    return BlobFromJSONTyped(json, false);
}

export function BlobFromJSONTyped(json: any, ignoreDiscriminator: boolean): Blob {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blobId': !exists(json, 'blobId') ? undefined : json['blobId'],
        'blobPath': !exists(json, 'blobPath') ? undefined : json['blobPath'],
        'contentType': !exists(json, 'contentType') ? undefined : json['contentType'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'created': !exists(json, 'created') ? undefined : json['created'],
        'collectionId': !exists(json, 'collectionId') ? undefined : json['collectionId'],
        'deviceId': !exists(json, 'deviceId') ? undefined : json['deviceId'],
        'gatewayId': !exists(json, 'gatewayId') ? undefined : json['gatewayId'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
    };
}

export function BlobToJSON(value?: Blob | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blobId': value.blobId,
        'blobPath': value.blobPath,
        'contentType': value.contentType,
        'size': value.size,
        'created': value.created,
        'collectionId': value.collectionId,
        'deviceId': value.deviceId,
        'gatewayId': value.gatewayId,
        'properties': value.properties,
    };
}

