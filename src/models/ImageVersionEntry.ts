/* tslint:disable */
/* eslint-disable */
/**
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 5.0.5 contented-jamila
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The image version log contains all reported versions and firmware images 
 * by a device. The entries in the version log is independent of the image list;
 *  if an image is removed the entry will remain in the version log.
 * @export
 * @interface ImageVersionEntry
 */
export interface ImageVersionEntry {
    /**
     * 
     * @type {string}
     * @memberof ImageVersionEntry
     */
    deviceId?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageVersionEntry
     */
    imageId?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageVersionEntry
     */
    imageVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageVersionEntry
     */
    imageLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageVersionEntry
     */
    reported?: string;
}

/**
 * Check if a given object implements the ImageVersionEntry interface.
 */
export function instanceOfImageVersionEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ImageVersionEntryFromJSON(json: any): ImageVersionEntry {
    return ImageVersionEntryFromJSONTyped(json, false);
}

export function ImageVersionEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageVersionEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'deviceId': !exists(json, 'deviceId') ? undefined : json['deviceId'],
        'imageId': !exists(json, 'imageId') ? undefined : json['imageId'],
        'imageVersion': !exists(json, 'imageVersion') ? undefined : json['imageVersion'],
        'imageLabel': !exists(json, 'imageLabel') ? undefined : json['imageLabel'],
        'reported': !exists(json, 'reported') ? undefined : json['reported'],
    };
}

export function ImageVersionEntryToJSON(value?: ImageVersionEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'deviceId': value.deviceId,
        'imageId': value.imageId,
        'imageVersion': value.imageVersion,
        'imageLabel': value.imageLabel,
        'reported': value.reported,
    };
}

